{
  "hash": "101065745f4e962514445baf8d698e08",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R에서 구글빅쿼리 데이터 추출하기\"\ndescription: \"R패키지 bigrquery로 구글 빅쿼리에서 데이터 다운로드 하는 방법\"\nauthor: \"박세희\"\ndate: \"2024-02-26\"\ndate-modified: \"2024-03-12\"\ndate-format: \"iso\"\ntoc: true \ncategories: [featured, bigquery, SQL, R]\nfreeze: true \nimage: bigquery-r-thumbnail.webp\n---\n\n\n::: callout-tip\n## 언제 읽으면 좋을까?\n\n-   구글빅쿼리 데이터를 RStudio에서 받아오고 싶을 때\\\n-   구글빅쿼리와 RStudio 연결 방법을 모를 때\\\n-   bigrquery 패키지 사용법을 알고 싶을 때\\\n:::\n\n## 구글 빅쿼리(BigQuery)란?\n\n구글 빅쿼리는 대용량 데이터를 효율적으로 처리하고 분석할 수 있도록 구글에서 제공하는 온라인 데이터베이스 서비스 입니다. 특히 온라인 고객 행동을 모니터링하기 위해 사용하는 **GA4(구글애널리틱스4) 데이터를 빅쿼리로 바로 연동**하도록 설계되어 있습니다. 이 때문에 GA4 데이터 분석에서는 빅쿼리 사용 점점 늘어나고 있기도 합니다.\n\n빅쿼리는 많은 양의 데이터를 온라인에서 분석할 수 있도록 쥬피터노트북과 연계되어 있기 때문에 **데이터를 다운로드 하는 것 보다는 온라인에서 직접 분석하는 게 더 효율적일 수 있습니다.** 그럼에도 불구하고 데이터를 다운로드 받아서 로컬에서 분석해야 하는 경우, `bigrquery` 패키지를 활용하여 데이터를 다운로드 할 수도 있습니다.\n\n## 빅쿼리 시작하기\n\n::: callout-warning\n## 빅쿼리 먼저\n\n구글 빅쿼리에 계정과 데이터를 추가한 뒤에 R에서 연결합니다.\\\n\\* 계정 만들기\\\n\\* 계정에 공개 데이터셋 추가하기\n:::\n\n### (1) 빅쿼리 계정 만들기\n\n[빅쿼리 홈페이지](https://cloud.google.com/bigquery?hl=ko)를 방문하여 본인의 구글 계정에서 빅쿼리를 사용할 수 있도록 가입합니다. 빅쿼리 시작 시에는 무료이며, 300\\$의 무료 크레딧이 제공됩니다. 데이터를 불러올 때 용량에 따라 크레딧이 차감되고, 크레딧을 소진하는 경우 추가 비용이 발생할 수 있습니다.\n\n빅쿼리 계정을 만들면 `콘솔`(대시보드)가 생성됩니다.\n\n### (3) 빅쿼리 계정에 공개 데이터셋 추가하기\n\n`bigrquery` 설치 후 예제를 수행하기 위해서는 본인의 구글 계정에 테스트용 공개 데이터셋를 먼저 추가해야 합니다. 추가하는 방법은 다음과 같습니다.\n\n-   빅쿼리 콘솔 \\> 탐색기(Explorer) \\> `+추가` 버튼 클릭\\\n-   새 창에서 \"public data\"로 검색 \\> Public datasets 선택\\\n-   필터에서 분석, 데이터, 무료 선택 \\> 'Google's diversity annual report data' 선택: 이 때 무엇을 선택해도 상관없이 나의 데이터 목록에 `bigquery-public-data` 프로젝트가 추가 됩니다.\\\n-   `bigquery-public-data` 프로젝트를 클릭하면 수 많은 데이터 목록이 보이는데, 그 중에 \"samples\"라는 데이터셋을 테스트 하겠습니다.\n\n\n{{< video https://youtu.be/Nu-9Myq1UCE title = \"빅쿼리 공개데이터 추가\" >}}\n\n\n\n### (4) 빅쿼리 데이터 구조\n\n빅쿼리는 **프로젝트 \\> 데이터셋 \\> 테이블** 3단 구조로 설계되어 있습니다. 분석용 데이터는 `테이블`에 저장되어 있습니다. 우리에게 친숙한 엑셀과 비교하자면, 데이터셋은 파일, 테이블은 시트와 유사한 구조입니다.\n\n빅쿼리 접속할 경우에 이 3가지 정보를 정확히 입력해야 원하는 데이터를 받을 수 있습니다.\n\n## bigrquery 패키지\n\n`bigrquery` 패키지는 가벼운 API 연동으로 빅쿼리에 저장된 데이터 정보(메타데이터)를 빠르게 받아올 수 있습니다.\n\n### (a) 패키지 설치하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"bigrquery\")\nlibrary(bigrquery)\n```\n:::\n\n\n### (b) 계정 인증\n\n다음 명령을 실행하면 웹 브라우저가 열리면서 구글 계정에 로그인하도록 안내가 됩니다. 계정 연결은 최초 1회만 필요합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbigrquery::bq_auth()\n```\n:::\n\n\n![빅쿼리 계정 인증 필요](bq_auth_web.webp){fig-align=\"center\" width=\"50%\"}\n\n### (c) 공개 데이터셋 정보 확인\n\n공개 데이터셋 정보는 다음과 같습니다.\n\n-   프로젝트: \"bigquery-public-data\"\\\n-   데이터셋: \"samples\"\n\n데이터셋 안에 어떤 테이블이 존재하는지 모를 경우, `bq_dataset(\"프로젝트명\", \"데이터셋명\")` 명령을 실행하여 확인 합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_sample <- bigrquery::bq_dataset(\"bigquery-public-data\", \"samples\")\nprint(ds_sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.bg-gray}\n<bq_dataset> bigquery-public-data.samples\n```\n\n\n:::\n:::\n\n\n데이터에 관한 정보, 즉 메타데이터를 추출하기 때문에 **\"프로젝트명.데이터셋명\"**으로 정의된 데이터가 있다고 확인 메세지를 출력합니다.\n\n데이터셋에 어떤 테이블이 들어 있는지 확인하려면, `bq_dataset_tables(\"프로젝트명\", \"데이터셋명\")` 명령을 실행 합니다. 여기서는 해당 정보를 `ds_samples_tables` 변수에 저장합니다.\n\n`ds_samples_tables`에서 메타데이터 정보를 추출하면 총 7개의 테이블이 있는 것을 알 수 있습니다. 구글 빅쿼리 홈페이지에서 확인했던 7개 테이블과 동일한 정보 입니다.\n\n테이블 이름은 **\"프로젝트.데이터셋.테이블\"**으로 표시됩니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_samples_tables <- bigrquery::bq_dataset_tables(ds_sample) \nprint(ds_samples_tables)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.bg-gray}\n[[1]]\n<bq_table> bigquery-public-data.samples.github_nested\n\n[[2]]\n<bq_table> bigquery-public-data.samples.github_timeline\n\n[[3]]\n<bq_table> bigquery-public-data.samples.gsod\n\n[[4]]\n<bq_table> bigquery-public-data.samples.natality\n\n[[5]]\n<bq_table> bigquery-public-data.samples.shakespeare\n\n[[6]]\n<bq_table> bigquery-public-data.samples.trigrams\n\n[[7]]\n<bq_table> bigquery-public-data.samples.wikipedia\n```\n\n\n:::\n:::\n\n\n#### (d) 분석 데이터 선택\n\n7개 테이블 중 `natality` 테이블을 선택합니다. `bq_table(프로젝트, 데이터셋, 테이블)` 명령을 실행하면 해당 테이블에 대한 메타 정보를 출력합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnatality <- bigrquery::bq_table(\"bigquery-public-data\", \"samples\", \"natality\")\nprint(natality)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.bg-gray}\n<bq_table> bigquery-public-data.samples.natality\n```\n\n\n:::\n:::\n\n\n### (e) 주의사항\n\n메타데이터는 실제 해당 테이블이 가지고 있는 데이터를 포함하지 않고 단순히 어떤 프로젝트, 데이터셋, 테이블 인지를 정의한 정보 입니다. 데이터를 출력하려면 `bq_table_download()`를 사용합니다. 이 때 서버에 얼마나 많은 양의 데이터가 있는지 알 수 없기 때문에 **모든 데이터를 출력하지 않아야 합니다.** 자칫 실수로 전체 데이터를 받을 경우 과도한 비용과 서버 과부하가 발생합니다.\n\n또한 빅쿼리는 데이터를 \"열(column)\"을 기준으로 저장합니다. 따라서 열을 조회하는 순간 행(row) 갯수와 관계없이 비용이 부과됩니다.\n\n빅쿼리는 데이터 저장 비용은 매우 저렴하지만, 데이터를 조회(SELECT)하거나 추출할 때 비용이 발생하기 때문에 `sql` 쿼리 설계를 잘 해야 운영 비용이 적게 발생합니다.\n\n따라서 다음과 같이 테이블이 가진 첫 6개 행을 출력하는 것은 비용 절감에 도움이 되지 않습니다.\n\n**첫 6개행 출력하기**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnatality_df <- bigrquery::bq_table_download(natality, n_max = 6)\nprint(natality_df)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-81179b1188b33cd73889\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-81179b1188b33cd73889\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"source_year\":[2005,2005,2005,2005,2005,2005],\"year\":[2005,2005,2005,2005,2005,2005],\"month\":[1,2,5,8,5,5],\"day\":[\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\"],\"wday\":[3,7,4,4,6,4],\"state\":[null,null,null,null,null,null],\"is_male\":[true,false,false,false,true,false],\"child_race\":[\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\"],\"weight_pounds\":[7.8043640748,5.37486994756,6.4374980504,6.56095691712,8.81187661214,6.12444163836],\"plurality\":[1,2,1,1,1,1],\"apgar_1min\":[\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\"],\"apgar_5min\":[\"NA\",8,7,9,9,\"NA\"],\"mother_residence_state\":[null,null,null,null,null,null],\"mother_race\":[38,1,\"NA\",\"NA\",\"NA\",7],\"mother_age\":[30,29,24,26,22,28],\"gestation_weeks\":[40,38,39,\"NA\",40,39],\"lmp\":[\"04172004\",\"05992004\",\"99999999\",\"99999999\",\"99999999\",\"08112004\"],\"mother_married\":[true,true,true,false,false,true],\"mother_birth_state\":[null,null,null,null,null,null],\"cigarette_use\":[null,false,null,null,null,null],\"cigarettes_per_day\":[\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\"],\"alcohol_use\":[null,false,null,null,null,null],\"drinks_per_week\":[\"NA\",\"NA\",\"NA\",\"NA\",\"NA\",\"NA\"],\"weight_gain_pounds\":[99,8,99,25,99,99],\"born_alive_alive\":[5,9,\"NA\",\"NA\",\"NA\",0],\"born_alive_dead\":[2,0,\"NA\",\"NA\",\"NA\",0],\"born_dead\":[1,0,\"NA\",\"NA\",\"NA\",0],\"ever_born\":[8,10,\"NA\",\"NA\",\"NA\",1],\"father_race\":[38,1,\"NA\",\"NA\",\"NA\",7],\"father_age\":[24,31,31,99,33,33],\"record_weight\":[1,1,1,1,1,1]},\"columns\":[{\"id\":\"source_year\",\"name\":\"source_year\",\"type\":\"numeric\"},{\"id\":\"year\",\"name\":\"year\",\"type\":\"numeric\"},{\"id\":\"month\",\"name\":\"month\",\"type\":\"numeric\"},{\"id\":\"day\",\"name\":\"day\",\"type\":\"numeric\"},{\"id\":\"wday\",\"name\":\"wday\",\"type\":\"numeric\"},{\"id\":\"state\",\"name\":\"state\",\"type\":\"character\"},{\"id\":\"is_male\",\"name\":\"is_male\",\"type\":\"logical\"},{\"id\":\"child_race\",\"name\":\"child_race\",\"type\":\"numeric\"},{\"id\":\"weight_pounds\",\"name\":\"weight_pounds\",\"type\":\"numeric\"},{\"id\":\"plurality\",\"name\":\"plurality\",\"type\":\"numeric\"},{\"id\":\"apgar_1min\",\"name\":\"apgar_1min\",\"type\":\"numeric\"},{\"id\":\"apgar_5min\",\"name\":\"apgar_5min\",\"type\":\"numeric\"},{\"id\":\"mother_residence_state\",\"name\":\"mother_residence_state\",\"type\":\"character\"},{\"id\":\"mother_race\",\"name\":\"mother_race\",\"type\":\"numeric\"},{\"id\":\"mother_age\",\"name\":\"mother_age\",\"type\":\"numeric\"},{\"id\":\"gestation_weeks\",\"name\":\"gestation_weeks\",\"type\":\"numeric\"},{\"id\":\"lmp\",\"name\":\"lmp\",\"type\":\"character\"},{\"id\":\"mother_married\",\"name\":\"mother_married\",\"type\":\"logical\"},{\"id\":\"mother_birth_state\",\"name\":\"mother_birth_state\",\"type\":\"character\"},{\"id\":\"cigarette_use\",\"name\":\"cigarette_use\",\"type\":\"logical\"},{\"id\":\"cigarettes_per_day\",\"name\":\"cigarettes_per_day\",\"type\":\"numeric\"},{\"id\":\"alcohol_use\",\"name\":\"alcohol_use\",\"type\":\"logical\"},{\"id\":\"drinks_per_week\",\"name\":\"drinks_per_week\",\"type\":\"numeric\"},{\"id\":\"weight_gain_pounds\",\"name\":\"weight_gain_pounds\",\"type\":\"numeric\"},{\"id\":\"born_alive_alive\",\"name\":\"born_alive_alive\",\"type\":\"numeric\"},{\"id\":\"born_alive_dead\",\"name\":\"born_alive_dead\",\"type\":\"numeric\"},{\"id\":\"born_dead\",\"name\":\"born_dead\",\"type\":\"numeric\"},{\"id\":\"ever_born\",\"name\":\"ever_born\",\"type\":\"numeric\"},{\"id\":\"father_race\",\"name\":\"father_race\",\"type\":\"numeric\"},{\"id\":\"father_age\",\"name\":\"father_age\",\"type\":\"numeric\"},{\"id\":\"record_weight\",\"name\":\"record_weight\",\"type\":\"numeric\"}],\"resizable\":true,\"nowrap\":true,\"dataKey\":\"f43128bdd846e2adb9e1eb210700dab4\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n차라리 출력하는 열 갯수를 줄이는 것이 비용을 많이 절약할 수 있습니다. R에서는 실제 sql 문구를 적용하기 전에는 데이터 양이 얼마나 될 지 미리 알 수가 없습니다. 따라서 빅쿼리 초보 사용자라면 **구글 빅쿼리 콘솔에서 실제로 SQL 구문을 수정해 보면서 데이터 양을 비교**해 보는 것을 추천합니다.\n\n(1) natality 테이블 모든 열을 조회하는 경우: 데이터 용량 21.94GB\n\n![모든 열 1000개 행 조회 시 용량](natality_all.png)\n\n(2) natality 테이블 중 3개 열에 한정하여 조회하는 경우: 데이터 용량 2.11GB (1/10 정도로 줄었습니다)\n\n![3개 열 1000개 행 조회 시 용량](natality_3columns.png)\n\n(3) natality 테이블 중 3개 열의 행 추출 수를 제한하지 않아도(LIMIT 1000 삭제) 데이터 용량은 2.11 GB로 동일합니다.\n\n![3개 열 모든 행 조회 시 용량](natality_3columns_all.png)\n\n------------------------------------------------------------------------\n\n오늘은 R에서 빅쿼리 데이터에 접근해서 데이터를 다운로드하는 기초적인 방법을 알아 봤습니다. 다음 글에서는 필요한 열(column) 정보와 행(row) 정보를 선택할 수 있도록 SQL 코드를 R dplyr 패키지와 유사하게 구현할 수 있는 `dbplyr` 패키지를 활용해서 **효율적인 빅쿼리 데이터 다운로드** 방법에 관해 소개하겠습니다.\n\n> 빅쿼리에 저장된 GA4 데이터를 가장 효율적인 분석 언어 R로 추출해 보세요.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-1.0.0/react-tools.js\"></script>\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}